// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: period.sql

package dbcontext

import (
	"context"
	"database/sql"
	"time"
)

const createPeriod = `-- name: CreatePeriod :one
Insert Into Period (
    name,
    start_date,
    end_date
) values (?, ?, ?)
Returning id
`

type CreatePeriodParams struct {
	Name      sql.NullString
	StartDate time.Time
	EndDate   time.Time
}

func (q *Queries) CreatePeriod(ctx context.Context, arg CreatePeriodParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPeriod, arg.Name, arg.StartDate, arg.EndDate)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deletePeriod = `-- name: DeletePeriod :exec
Delete from Period
where id = ?
`

func (q *Queries) DeletePeriod(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePeriod, id)
	return err
}

const getPeriod = `-- name: GetPeriod :one
select id, name, start_date, end_date 
from Period
where id = ?
limit 1
`

func (q *Queries) GetPeriod(ctx context.Context, id int64) (Period, error) {
	row := q.db.QueryRowContext(ctx, getPeriod, id)
	var i Period
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const updatePeriod = `-- name: UpdatePeriod :exec
Update Period
set name = ?, start_date = ?, end_date = ?
where id = ?
`

type UpdatePeriodParams struct {
	Name      sql.NullString
	StartDate time.Time
	EndDate   time.Time
	ID        int64
}

func (q *Queries) UpdatePeriod(ctx context.Context, arg UpdatePeriodParams) error {
	_, err := q.db.ExecContext(ctx, updatePeriod,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	return err
}
