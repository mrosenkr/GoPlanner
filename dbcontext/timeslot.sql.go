// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: timeslot.sql

package dbcontext

import (
	"context"
	"time"
)

const createTimeSlot = `-- name: CreateTimeSlot :one
Insert Into TimeSlot (
    slot_date,
    start_time,
    end_time
) values (?, ?, ?)
Returning id
`

type CreateTimeSlotParams struct {
	SlotDate  time.Time
	StartTime time.Time
	EndTime   time.Time
}

func (q *Queries) CreateTimeSlot(ctx context.Context, arg CreateTimeSlotParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTimeSlot, arg.SlotDate, arg.StartTime, arg.EndTime)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteTimeSlot = `-- name: DeleteTimeSlot :exec
Delete from TimeSlot
where id = ?
`

func (q *Queries) DeleteTimeSlot(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTimeSlot, id)
	return err
}

const getTimeSlot = `-- name: GetTimeSlot :one
select id, slot_date, start_time, end_time 
from TimeSlot
where id = ?
limit 1
`

func (q *Queries) GetTimeSlot(ctx context.Context, id int64) (TimeSlot, error) {
	row := q.db.QueryRowContext(ctx, getTimeSlot, id)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.SlotDate,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const updateTimeSlot = `-- name: UpdateTimeSlot :exec
Update TimeSlot
set slot_date = ?, start_time = ?, end_time = ? 
where id = ?
`

type UpdateTimeSlotParams struct {
	SlotDate  time.Time
	StartTime time.Time
	EndTime   time.Time
	ID        int64
}

func (q *Queries) UpdateTimeSlot(ctx context.Context, arg UpdateTimeSlotParams) error {
	_, err := q.db.ExecContext(ctx, updateTimeSlot,
		arg.SlotDate,
		arg.StartTime,
		arg.EndTime,
		arg.ID,
	)
	return err
}
