// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schedule.sql

package dbcontext

import (
	"context"
	"database/sql"
)

const createSchedule = `-- name: CreateSchedule :one
Insert Into Schedule (
    name
) values (?)
Returning id
`

func (q *Queries) CreateSchedule(ctx context.Context, name sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSchedule, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
Delete from Schedule
where id = ?
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const getSchedule = `-- name: GetSchedule :one
select id, name 
from Schedule
where id = ?
limit 1
`

func (q *Queries) GetSchedule(ctx context.Context, id int64) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateSchedule = `-- name: UpdateSchedule :exec
Update Schedule
set name = ?
where id = ?
`

type UpdateScheduleParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateSchedule, arg.Name, arg.ID)
	return err
}
