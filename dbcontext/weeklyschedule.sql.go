// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weeklyschedule.sql

package dbcontext

import (
	"context"
	"database/sql"
	"time"
)

const createWeeklySchedule = `-- name: CreateWeeklySchedule :one
Insert Into WeeklySchedule (
    name,
    period_id,
    schedule_id,
    start_time,
    end_time
) values (?, ?, ?, ?, ?)
Returning id
`

type CreateWeeklyScheduleParams struct {
	Name       sql.NullString
	PeriodID   int64
	ScheduleID int64
	StartTime  time.Time
	EndTime    time.Time
}

func (q *Queries) CreateWeeklySchedule(ctx context.Context, arg CreateWeeklyScheduleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createWeeklySchedule,
		arg.Name,
		arg.PeriodID,
		arg.ScheduleID,
		arg.StartTime,
		arg.EndTime,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteWeeklySchedule = `-- name: DeleteWeeklySchedule :exec
Delete from WeeklySchedule
where id = ?
`

func (q *Queries) DeleteWeeklySchedule(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWeeklySchedule, id)
	return err
}

const getWeeklySchedule = `-- name: GetWeeklySchedule :one
select id, name, period_id, schedule_id, start_time, end_time 
from WeeklySchedule
where id = ?
limit 1
`

func (q *Queries) GetWeeklySchedule(ctx context.Context, id int64) (WeeklySchedule, error) {
	row := q.db.QueryRowContext(ctx, getWeeklySchedule, id)
	var i WeeklySchedule
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PeriodID,
		&i.ScheduleID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const updateWeeklySchedule = `-- name: UpdateWeeklySchedule :exec
Update WeeklySchedule
set name = ?, period_id = ?, schedule_id = ?, start_time = ?, end_time = ? 
where id = ?
`

type UpdateWeeklyScheduleParams struct {
	Name       sql.NullString
	PeriodID   int64
	ScheduleID int64
	StartTime  time.Time
	EndTime    time.Time
	ID         int64
}

func (q *Queries) UpdateWeeklySchedule(ctx context.Context, arg UpdateWeeklyScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateWeeklySchedule,
		arg.Name,
		arg.PeriodID,
		arg.ScheduleID,
		arg.StartTime,
		arg.EndTime,
		arg.ID,
	)
	return err
}
